{ scannerConfig } from './ScannerConfig.civet'
{ BaseBitburner } from '../../utils/BaseBitburner.civet'

export type QueryHostResponseDTO =
    hostname: string
    maxRam: number
    availableRam: number
    minSecurityLevel: number
 
export type GetNeighboursResponseDTO =
    hostname: string
    neighbours: string[]

export class ScannerService extends BaseBitburner
    commands = ['query_host', 'get_neighbours'] as const

    start(): Promise<void>
        @logger.info `Starting Scanner Service. Listening on port ${scannerConfig.query_scan_host_port}`
        while true
            query := @ns.readPort scannerConfig.query_scan_host_port
            if query === 'NULL PORT DATA'
                await @ns.sleep 1000
            else if typeof query === 'number'
                @logger.warn `Query should be JSON, not number`
            else
                @logger.info 'ScannerService received query'
                @logger.info query 
                try
                    parsedQuery := JSON.parse(query)
                    #handleQuery(parsedQuery)
                catch e
                    @logger.error `Error parsing query: ${e}`


    #handleQuery(query: Record<string, any>)
        if query.command === undefined && typeof query.command !== 'string'
            throw new Error 'Missing command in query'  
        if (@commands.indexOf query.command) === -1
            throw new Error `Unkown command "${query.command}"`        

        switch (query.command as typeof @commands[number])
            when 'query_host'
                if query.params.hostname === undefined || query.params.responsePort === undefined
                    throw new Error `Missing hostname or responsePort in query params ${JSON.stringify query}`

                @queryHost query.params.hostname, query.params.responsePort
            when 'get_neighbours'
                if query.params.hostname === undefined || query.params.responsePort === undefined
                    throw new Error `Missing hostname or responsePort in query params ${JSON.stringify query}`

                @getNeighbours query.params.hostname, query.params.responsePort


    queryHost(hostname: string, responsePort: number): void
        @logger.info `Scanning host: ${hostname}`
        response: QueryHostResponseDTO :=
            hostname: hostname
            maxRam: @ns.getServerMaxRam hostname
            availableRam: (@ns.getServerMaxRam hostname) - (@ns.getServerUsedRam hostname)
            minSecurityLevel: @ns.getServerMinSecurityLevel hostname


        @ns.writePort responsePort, JSON.stringify response


    /**
     * Get the list of hosts accessible from the given host 
     */
    getNeighbours(hostname: string, responsePort: number)
        @logger.info `Getting neighbours of ${hostname}`
        neighbours := @ns.scan hostname

        response: GetNeighboursResponseDTO :=
            hostname: hostname
            neighbours: neighbours

        @ns.writePort responsePort, JSON.stringify response

export function main(ns: NS)
    scanner := new ScannerService(ns)
    await scanner.start()
