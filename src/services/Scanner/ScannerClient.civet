{ BaseBitburner } from '../../utils/BaseBitburner.civet'
{ scannerConfig } from './ScannerConfig.civet'
{ PortsManagerClient } from '../PortsManager/PortsManagerClient.civet'
{ QueryHostResponseDTO, GetNeighboursResponseDTO } from './ScannerService.civet'

export class ScannerClient extends BaseBitburner
    queryHost(hostname: string)
        query :=
            command: 'query_host'
            params:
                hostname: hostname

        return #queryScannerService<QueryHostResponseDTO>(query)

    getNeighbours(hostname: string)
        query :=
            command: 'get_neighbours'
            params:
                hostname: hostname
        
        return #queryScannerService<GetNeighboursResponseDTO>(query) 


    #queryScannerService<ResponseDTO>(query: Record<string, any>)
        @logger.info `Querying Scanner Service`
        portsClient := new PortsManagerClient(@ns)
        reservedPort := await portsClient.claim()
        query.params.responsePort = reservedPort
        @logger.success `Rerserved port ${reservedPort}`

        @ns.writePort scannerConfig.query_scan_host_port, JSON.stringify query
        @logger.info `Query sent to Scanner Service. Waiting for response...`
        loop
            response := @ns.readPort reservedPort
            if response !== 'NULL PORT DATA'
                @logger.success `Received response from Scanner Service: ${response}`
                return (JSON.parse response) as ResponseDTO

            @logger.info `Waiting for neighbours response...`
            await @ns.sleep 1000


    



export function main(ns: NS)
    scannerClient := new ScannerClient(ns)
    scanResult := await scannerClient.queryHost('foodnstuff')
    ns.tprint(scanResult)
